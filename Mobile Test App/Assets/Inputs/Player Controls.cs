//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Press"",
            ""id"": ""06a61072-1f4b-41c3-bc16-034af741b741"",
            ""actions"": [
                {
                    ""name"": ""TouchInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c96c1aec-5917-43e9-8814-9cec1508a0a0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenPress"",
                    ""type"": ""Button"",
                    ""id"": ""d268c07c-f9ea-4e0b-ae6c-493765559a49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""982a450a-d0d1-4339-a578-6051bfc61405"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb73ef85-cf96-4f6d-b15f-502691acc92d"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbd87ac4-52f2-427a-b71f-98dff5772dfd"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a221819-6868-4b87-b8d6-df60b5a34b48"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Press
        m_Press = asset.FindActionMap("Press", throwIfNotFound: true);
        m_Press_TouchInput = m_Press.FindAction("TouchInput", throwIfNotFound: true);
        m_Press_ScreenPress = m_Press.FindAction("ScreenPress", throwIfNotFound: true);
        m_Press_TouchPosition = m_Press.FindAction("TouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Press
    private readonly InputActionMap m_Press;
    private IPressActions m_PressActionsCallbackInterface;
    private readonly InputAction m_Press_TouchInput;
    private readonly InputAction m_Press_ScreenPress;
    private readonly InputAction m_Press_TouchPosition;
    public struct PressActions
    {
        private @PlayerControls m_Wrapper;
        public PressActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchInput => m_Wrapper.m_Press_TouchInput;
        public InputAction @ScreenPress => m_Wrapper.m_Press_ScreenPress;
        public InputAction @TouchPosition => m_Wrapper.m_Press_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_Press; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PressActions set) { return set.Get(); }
        public void SetCallbacks(IPressActions instance)
        {
            if (m_Wrapper.m_PressActionsCallbackInterface != null)
            {
                @TouchInput.started -= m_Wrapper.m_PressActionsCallbackInterface.OnTouchInput;
                @TouchInput.performed -= m_Wrapper.m_PressActionsCallbackInterface.OnTouchInput;
                @TouchInput.canceled -= m_Wrapper.m_PressActionsCallbackInterface.OnTouchInput;
                @ScreenPress.started -= m_Wrapper.m_PressActionsCallbackInterface.OnScreenPress;
                @ScreenPress.performed -= m_Wrapper.m_PressActionsCallbackInterface.OnScreenPress;
                @ScreenPress.canceled -= m_Wrapper.m_PressActionsCallbackInterface.OnScreenPress;
                @TouchPosition.started -= m_Wrapper.m_PressActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_PressActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_PressActionsCallbackInterface.OnTouchPosition;
            }
            m_Wrapper.m_PressActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchInput.started += instance.OnTouchInput;
                @TouchInput.performed += instance.OnTouchInput;
                @TouchInput.canceled += instance.OnTouchInput;
                @ScreenPress.started += instance.OnScreenPress;
                @ScreenPress.performed += instance.OnScreenPress;
                @ScreenPress.canceled += instance.OnScreenPress;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
            }
        }
    }
    public PressActions @Press => new PressActions(this);
    public interface IPressActions
    {
        void OnTouchInput(InputAction.CallbackContext context);
        void OnScreenPress(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
